/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsGreetingParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=Greeting*;
		@Override public ParserRule getRule() { return rule; }
		
		//greetings+=Greeting*
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }
		
		//Greeting
		public RuleCall getGreetingsGreetingParserRuleCall_0() { return cGreetingsGreetingParserRuleCall_0; }
	}
	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Greeting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHelloKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Greeting:
		//	'Hello' name=ID '!';
		@Override public ParserRule getRule() { return rule; }
		
		//'Hello' name=ID '!'
		public Group getGroup() { return cGroup; }
		
		//'Hello'
		public Keyword getHelloKeyword_0() { return cHelloKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
	}
	public class AtmosphereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Atmosphere");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWHITE_SPACETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCOMMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Atmosphere:
		//	WHITE_SPACE | COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//WHITE_SPACE | COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WHITE_SPACE
		public RuleCall getWHITE_SPACETerminalRuleCall_0() { return cWHITE_SPACETerminalRuleCall_0; }
		
		//COMMENT
		public RuleCall getCOMMENTTerminalRuleCall_1() { return cCOMMENTTerminalRuleCall_1; }
	}
	public class Intertoken_SpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Intertoken_Space");
		private final RuleCall cAtmosphereParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Intertoken_Space:
		//	Atmosphere*;
		@Override public ParserRule getRule() { return rule; }
		
		//Atmosphere*
		public RuleCall getAtmosphereParserRuleCall() { return cAtmosphereParserRuleCall; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cInitialParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSubsequentParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cPECULIAR__IDENTIFIERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Identifier:
		//	Initial Subsequent* | PECULIAR__IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//Initial Subsequent* | PECULIAR__IDENTIFIER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Initial Subsequent*
		public Group getGroup_0() { return cGroup_0; }
		
		//Initial
		public RuleCall getInitialParserRuleCall_0_0() { return cInitialParserRuleCall_0_0; }
		
		//Subsequent*
		public RuleCall getSubsequentParserRuleCall_0_1() { return cSubsequentParserRuleCall_0_1; }
		
		//PECULIAR__IDENTIFIER
		public RuleCall getPECULIAR__IDENTIFIERTerminalRuleCall_1() { return cPECULIAR__IDENTIFIERTerminalRuleCall_1; }
	}
	public class InitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Initial");
		private final RuleCall cLETTERTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Initial:
		//	LETTER;
		@Override public ParserRule getRule() { return rule; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall() { return cLETTERTerminalRuleCall; }
	}
	public class SubsequentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Subsequent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInitialParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDIGITTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSPECIAL__SUBSEQUENTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Subsequent:
		//	Initial | DIGIT | SPECIAL__SUBSEQUENT;
		@Override public ParserRule getRule() { return rule; }
		
		//Initial | DIGIT | SPECIAL__SUBSEQUENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Initial
		public RuleCall getInitialParserRuleCall_0() { return cInitialParserRuleCall_0; }
		
		//DIGIT
		public RuleCall getDIGITTerminalRuleCall_1() { return cDIGITTerminalRuleCall_1; }
		
		//SPECIAL__SUBSEQUENT
		public RuleCall getSPECIAL__SUBSEQUENTTerminalRuleCall_2() { return cSPECIAL__SUBSEQUENTTerminalRuleCall_2; }
	}
	public class Syntactic_KeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Syntactic_Keyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpression_KeywordParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDefineKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUnquoteKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cUnquoteSplicingKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Syntactic_Keyword:
		//	Expression_Keyword | "else" | "=>" | "define" | "unquote" | "unquote-splicing";
		@Override public ParserRule getRule() { return rule; }
		
		//Expression_Keyword | "else" | "=>" | "define" | "unquote" | "unquote-splicing"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression_Keyword
		public RuleCall getExpression_KeywordParserRuleCall_0() { return cExpression_KeywordParserRuleCall_0; }
		
		//"else"
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//"define"
		public Keyword getDefineKeyword_3() { return cDefineKeyword_3; }
		
		//"unquote"
		public Keyword getUnquoteKeyword_4() { return cUnquoteKeyword_4; }
		
		//"unquote-splicing"
		public Keyword getUnquoteSplicingKeyword_5() { return cUnquoteSplicingKeyword_5; }
	}
	public class Expression_KeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression_Keyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cQuoteKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLambdaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIfKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSetKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBeginKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCondKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cAndKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOrKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCaseKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cLetKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cLetKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cLetrecKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cDoKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cDelayKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cQuasiquoteKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		
		//Expression_Keyword:
		//	"quote" | "lambda" | "if" | "set!" | "begin" | "cond" | "and" | "or" | "case" | "let" | "let*" | "letrec" | "do" |
		//	"delay" | "quasiquote";
		@Override public ParserRule getRule() { return rule; }
		
		//"quote" | "lambda" | "if" | "set!" | "begin" | "cond" | "and" | "or" | "case" | "let" | "let*" | "letrec" | "do" |
		//"delay" | "quasiquote"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"quote"
		public Keyword getQuoteKeyword_0() { return cQuoteKeyword_0; }
		
		//"lambda"
		public Keyword getLambdaKeyword_1() { return cLambdaKeyword_1; }
		
		//"if"
		public Keyword getIfKeyword_2() { return cIfKeyword_2; }
		
		//"set!"
		public Keyword getSetKeyword_3() { return cSetKeyword_3; }
		
		//"begin"
		public Keyword getBeginKeyword_4() { return cBeginKeyword_4; }
		
		//"cond"
		public Keyword getCondKeyword_5() { return cCondKeyword_5; }
		
		//"and"
		public Keyword getAndKeyword_6() { return cAndKeyword_6; }
		
		//"or"
		public Keyword getOrKeyword_7() { return cOrKeyword_7; }
		
		//"case"
		public Keyword getCaseKeyword_8() { return cCaseKeyword_8; }
		
		//"let"
		public Keyword getLetKeyword_9() { return cLetKeyword_9; }
		
		//"let*"
		public Keyword getLetKeyword_10() { return cLetKeyword_10; }
		
		//"letrec"
		public Keyword getLetrecKeyword_11() { return cLetrecKeyword_11; }
		
		//"do"
		public Keyword getDoKeyword_12() { return cDoKeyword_12; }
		
		//"delay"
		public Keyword getDelayKeyword_13() { return cDelayKeyword_13; }
		
		//"quasiquote"
		public Keyword getQuasiquoteKeyword_14() { return cQuasiquoteKeyword_14; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean:
		//	"#t" | "#f";
		@Override public ParserRule getRule() { return rule; }
		
		//"#t" | "#f"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"#t"
		public Keyword getTKeyword_0() { return cTKeyword_0; }
		
		//"#f"
		public Keyword getFKeyword_1() { return cFKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final GreetingElements pGreeting;
	private final TerminalRule tDIGIT;
	private final TerminalRule tLETTER;
	private final TerminalRule tWHITE_SPACE;
	private final TerminalRule tDELIMITER;
	private final TerminalRule tSPECIAL__SUBSEQUENT;
	private final TerminalRule tCOMMENT;
	private final TerminalRule tPECULIAR__IDENTIFIER;
	private final AtmosphereElements pAtmosphere;
	private final Intertoken_SpaceElements pIntertoken_Space;
	private final IdentifierElements pIdentifier;
	private final InitialElements pInitial;
	private final SubsequentElements pSubsequent;
	private final Syntactic_KeywordElements pSyntactic_Keyword;
	private final Expression_KeywordElements pExpression_Keyword;
	private final BooleanElements pBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGreeting = new GreetingElements();
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DIGIT");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LETTER");
		this.tWHITE_SPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WHITE_SPACE");
		this.tDELIMITER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DELIMITER");
		this.tSPECIAL__SUBSEQUENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SPECIAL__SUBSEQUENT");
		this.tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.COMMENT");
		this.tPECULIAR__IDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PECULIAR__IDENTIFIER");
		this.pAtmosphere = new AtmosphereElements();
		this.pIntertoken_Space = new Intertoken_SpaceElements();
		this.pIdentifier = new IdentifierElements();
		this.pInitial = new InitialElements();
		this.pSubsequent = new SubsequentElements();
		this.pSyntactic_Keyword = new Syntactic_KeywordElements();
		this.pExpression_Keyword = new Expression_KeywordElements();
		this.pBoolean = new BooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=Greeting*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Greeting:
	//	'Hello' name=ID '!';
	public GreetingElements getGreetingAccess() {
		return pGreeting;
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}
	
	//terminal DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal LETTER:
	//	'a'..'z';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal WHITE_SPACE:
	//	' ' | '\n';
	public TerminalRule getWHITE_SPACERule() {
		return tWHITE_SPACE;
	}
	
	//terminal DELIMITER:
	//	WHITE_SPACE | "(" | ")" | '"' | ";";
	public TerminalRule getDELIMITERRule() {
		return tDELIMITER;
	}
	
	//terminal SPECIAL__SUBSEQUENT:
	//	"." | "+" | "-";
	public TerminalRule getSPECIAL__SUBSEQUENTRule() {
		return tSPECIAL__SUBSEQUENT;
	}
	
	//terminal COMMENT:
	//	";"->'\n';
	public TerminalRule getCOMMENTRule() {
		return tCOMMENT;
	}
	
	//terminal PECULIAR__IDENTIFIER:
	//	"+" | "-" | "...";
	public TerminalRule getPECULIAR__IDENTIFIERRule() {
		return tPECULIAR__IDENTIFIER;
	}
	
	//Atmosphere:
	//	WHITE_SPACE | COMMENT;
	public AtmosphereElements getAtmosphereAccess() {
		return pAtmosphere;
	}
	
	public ParserRule getAtmosphereRule() {
		return getAtmosphereAccess().getRule();
	}
	
	//Intertoken_Space:
	//	Atmosphere*;
	public Intertoken_SpaceElements getIntertoken_SpaceAccess() {
		return pIntertoken_Space;
	}
	
	public ParserRule getIntertoken_SpaceRule() {
		return getIntertoken_SpaceAccess().getRule();
	}
	
	//Identifier:
	//	Initial Subsequent* | PECULIAR__IDENTIFIER;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//Initial:
	//	LETTER;
	public InitialElements getInitialAccess() {
		return pInitial;
	}
	
	public ParserRule getInitialRule() {
		return getInitialAccess().getRule();
	}
	
	//Subsequent:
	//	Initial | DIGIT | SPECIAL__SUBSEQUENT;
	public SubsequentElements getSubsequentAccess() {
		return pSubsequent;
	}
	
	public ParserRule getSubsequentRule() {
		return getSubsequentAccess().getRule();
	}
	
	//Syntactic_Keyword:
	//	Expression_Keyword | "else" | "=>" | "define" | "unquote" | "unquote-splicing";
	public Syntactic_KeywordElements getSyntactic_KeywordAccess() {
		return pSyntactic_Keyword;
	}
	
	public ParserRule getSyntactic_KeywordRule() {
		return getSyntactic_KeywordAccess().getRule();
	}
	
	//Expression_Keyword:
	//	"quote" | "lambda" | "if" | "set!" | "begin" | "cond" | "and" | "or" | "case" | "let" | "let*" | "letrec" | "do" |
	//	"delay" | "quasiquote";
	public Expression_KeywordElements getExpression_KeywordAccess() {
		return pExpression_Keyword;
	}
	
	public ParserRule getExpression_KeywordRule() {
		return getExpression_KeywordAccess().getRule();
	}
	
	//Boolean:
	//	"#t" | "#f";
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
