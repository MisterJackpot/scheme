/*
 * generated by Xtext 2.12.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0());
			}
			lv_greetings_0_0=ruleGreeting
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"greetings",
					lv_greetings_0_0,
					"org.xtext.example.mydsl.MyDsl.Greeting");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleGreeting
entryRuleGreeting returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGreetingRule()); }
	iv_ruleGreeting=ruleGreeting
	{ $current=$iv_ruleGreeting.current; }
	EOF;

// Rule Greeting
ruleGreeting returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Hello'
		{
			newLeafNode(otherlv_0, grammarAccess.getGreetingAccess().getHelloKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGreetingRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='!'
		{
			newLeafNode(otherlv_2, grammarAccess.getGreetingAccess().getExclamationMarkKeyword_2());
		}
	)
;

// Entry rule entryRuleAtmosphere
entryRuleAtmosphere returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAtmosphereRule()); }
	iv_ruleAtmosphere=ruleAtmosphere
	{ $current=$iv_ruleAtmosphere.current.getText(); }
	EOF;

// Rule Atmosphere
ruleAtmosphere returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_WHITE_SPACE_0=RULE_WHITE_SPACE
		{
			$current.merge(this_WHITE_SPACE_0);
		}
		{
			newLeafNode(this_WHITE_SPACE_0, grammarAccess.getAtmosphereAccess().getWHITE_SPACETerminalRuleCall_0());
		}
		    |
		this_COMMENT_1=RULE_COMMENT
		{
			$current.merge(this_COMMENT_1);
		}
		{
			newLeafNode(this_COMMENT_1, grammarAccess.getAtmosphereAccess().getCOMMENTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleInitial
entryRuleInitial returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInitialRule()); }
	iv_ruleInitial=ruleInitial
	{ $current=$iv_ruleInitial.current.getText(); }
	EOF;

// Rule Initial
ruleInitial returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_LETTER_0=RULE_LETTER
	{
		$current.merge(this_LETTER_0);
	}
	{
		newLeafNode(this_LETTER_0, grammarAccess.getInitialAccess().getLETTERTerminalRuleCall());
	}
;

// Entry rule entryRuleSubsequent
entryRuleSubsequent returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSubsequentRule()); }
	iv_ruleSubsequent=ruleSubsequent
	{ $current=$iv_ruleSubsequent.current.getText(); }
	EOF;

// Rule Subsequent
ruleSubsequent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSubsequentAccess().getInitialParserRuleCall_0());
		}
		this_Initial_0=ruleInitial
		{
			$current.merge(this_Initial_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_DIGIT_1=RULE_DIGIT
		{
			$current.merge(this_DIGIT_1);
		}
		{
			newLeafNode(this_DIGIT_1, grammarAccess.getSubsequentAccess().getDIGITTerminalRuleCall_1());
		}
		    |
		this_SPECIAL__SUBSEQUENT_2=RULE_SPECIAL__SUBSEQUENT
		{
			$current.merge(this_SPECIAL__SUBSEQUENT_2);
		}
		{
			newLeafNode(this_SPECIAL__SUBSEQUENT_2, grammarAccess.getSubsequentAccess().getSPECIAL__SUBSEQUENTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleExpression_Keyword
entryRuleExpression_Keyword returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpression_KeywordRule()); }
	iv_ruleExpression_Keyword=ruleExpression_Keyword
	{ $current=$iv_ruleExpression_Keyword.current.getText(); }
	EOF;

// Rule Expression_Keyword
ruleExpression_Keyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='quote'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_KeywordAccess().getQuoteKeyword_0());
		}
		    |
		kw='lambda'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_KeywordAccess().getLambdaKeyword_1());
		}
		    |
		kw='if'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_KeywordAccess().getIfKeyword_2());
		}
		    |
		kw='set!'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_KeywordAccess().getSetKeyword_3());
		}
		    |
		kw='begin'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_KeywordAccess().getBeginKeyword_4());
		}
		    |
		kw='cond'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_KeywordAccess().getCondKeyword_5());
		}
		    |
		kw='and'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_KeywordAccess().getAndKeyword_6());
		}
		    |
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_KeywordAccess().getOrKeyword_7());
		}
		    |
		kw='case'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_KeywordAccess().getCaseKeyword_8());
		}
		    |
		kw='let'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_KeywordAccess().getLetKeyword_9());
		}
		    |
		kw='let*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_KeywordAccess().getLetKeyword_10());
		}
		    |
		kw='letrec'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_KeywordAccess().getLetrecKeyword_11());
		}
		    |
		kw='do'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_KeywordAccess().getDoKeyword_12());
		}
		    |
		kw='delay'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_KeywordAccess().getDelayKeyword_13());
		}
		    |
		kw='quasiquote'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpression_KeywordAccess().getQuasiquoteKeyword_14());
		}
	)
;

RULE_DIGIT : '0'..'9';

RULE_LETTER : 'a'..'z';

RULE_WHITE_SPACE : (' '|'\n');

RULE_DELIMITER : (RULE_WHITE_SPACE|'('|')'|'"'|';');

RULE_SPECIAL__SUBSEQUENT : ('.'|'+'|'-');

RULE_COMMENT : ';' ( options {greedy=false;} : . )*'\n';

RULE_PECULIAR__IDENTIFIER : ('+'|'-'|'...');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
